// Generated by LiveScript 1.3.1
var $, zendo, rule, game, validateKoan, initialize, initializeKoan, initializeRule;
$ = require('jquery');
zendo = require('./zendo');
random = require('./random');
rule = zendo.randomRule();
game = new zendo.Game(rule);
/*
next-words-list = $ '#next-words-list'
html = ""
for word in translation.suggestions
  html := html + " #word" #<li class='list-group-item'>#word</li>"
next-words-list.html(html)
# todo: escape <space> and <enter>!
interpretations-html = ""
for sentence in translation.paraphrases
  interpretations-html := interpretations-html + "<li class='list-group-item'>#sentence</li>"
$('#other-interpretations').html(interpretations-html)
*/
validateKoan = function(cards, complete){
  console.log('cards', cards);
  var condition, i$, len$, i, card;
  if (complete) {
    condition = function(card, i){
      return true;
    };
  } else {
    condition = function(card, i){
      return i !== cards.length - 1 || card.length >= 2 ||
        (card.length === 1 && "A23456789TJQK".indexOf(card) === -1);
    };
  }
  for (i$ = 0, len$ = cards.length; i$ < len$; ++i$) {
    i = i$;
    card = cards[i$];
    if (condition(card, i)) {
      if (card.length === 1 && "A23456789TJQK".indexOf(card) === -1) {
        return "I don't understand the card '" + card + ". Each card must begin with one of these characters: A23456789TJQK.";
      }
      if (card.indexOf("10") === 0) {
        return "Try 'T" + card.slice(2) + "' instead of '" + card + "'";
      }
      if (card.indexOf("11") === 0) {
        return "Try 'J" + card.slice(2) + "' instead of '" + card + "'";
      }
      if (card.indexOf("12") === 0) {
        return "Try 'Q" + card.slice(2) + "' instead of '" + card + "'";
      }
      if (card.indexOf("13") === 0) {
        return "Try 'K" + card.slice(2) + "' instead of '" + card + "'";
      }
      if (card.indexOf("1") === 0) {
        return "Try 'A" + card.slice(1) + "' instead of '" + card + "'";
      }
      if (card.length !== 2) {
        return "I don't understand the card '" + card + "'. Each card must be two characters long.";
      }
      if ("A23456789TJQK".indexOf(card[0]) === -1) {
        return "I don't understand the card '" + card + "'. Each card must begin with one of these characters: A23456789TJQK.";
      }
      if ("CDHS".indexOf(card[1]) === -1) {
        return "I don't understand the card '" + card + "'. Each card must end with one of these characters: CDHS.";
      }
    }
  }
  return "";
};
initialize = function(components){
  initializeKoan(components);
  initializeRule(components);
  components.quit.onClick(function() {
    components.winlose.lose();
  });
  components.newGame.onClick(function() {
    var trueKoan, falseKoan;
    for (var i = 0; i < 1000; i++) {
      trueKoan = void 8;
      falseKoan = void 8;
      rule = zendo.randomRule();
      game = new zendo.Game(rule);
      var findKoan = function(expected) {
        for (var j = 0; j < 1000; j++) {
          var rk = random.randomKoan();
          if (game.markKoan(rk) === expected) {
            return rk;
          }
        }
      };
      trueKoan = findKoan(true);
      if (trueKoan == void 8) {
        continue;
      }
      falseKoan = findKoan(false);
      if (falseKoan == void 8) {
        continue;
      }
      break;
    }
    components.koans.clear();
    components.koans.add(trueKoan, true);
    components.koans.add(falseKoan, false);
  });
};
initializeKoan = function(components){
  components.koan.onKeydown(function(koan){
    var cards;
    if (koan == '') {
      cards = [];
    } else {
      cards = koan.trim().split(/\s+/);
    }
    var help = validateKoan(cards, false);
    return components.koan.showHelp(help);
  });
  return components.koan.onEnter(function(koan){
    var cards, error, buddha;
    cards = koan.trim().split(/\s+/);
    error = validateKoan(cards, true);
    components.koan.showHelp(error);
    if (error !== "") {
      return;
    }
    buddha = game.markKoan(cards);
    components.koans.add(koan, buddha);
    return components.koan.clear();
  });
};
initializeRule = function(components){
  components.rule.onKeydown(function(r){
    var translation;
    translation = zendo.translate(r);
    components.suggestions.set(translation.suggestions);
    components.paraphrases.set(translation.paraphrases);
    if (translation.suggestions.length === 0) {
      var wc = translation.understood == 1 ? "word" : translation.understood + " words";
      return components.suggestions.error("I only understand the first " + wc + " of that.");
    } else {
      return components.suggestions.error("");
    }
  });
  return components.rule.onEnter(function(r){
    var translation, evaluation, counterExample, mark, koan;
    translation = zendo.translate(r);
    if (!translation.rule) {
      return
    }
    evaluation = game.evaluateRule(translation.rule);
    components.rule.clear();
    if (evaluation.win) {
      components.winlose.win();
    } else {
      counterExample = evaluation.counterExample;
      mark = game.markKoan(counterExample);
      koan = counterExample.join(' ');
      return components.koans.add(koan, mark);
    }
  });
};
/*
koans:
  add :: String -> Bool -> IO ()
  clear :: IO ()
koan:
  on-keydown :: (String -> IO ()) -> IO ()
  on-enter :: IO () -> IO () -- clicking Mark also counts as clicking enter.
  show-help :: String -> IO ()
  clear :: IO ()
rule:
  on-keydown :: (String -> IO ()) -> IO ()
  on-enter :: (String -> IO ()) -> IO ()
  clear :: IO ()
paraphrases:
  set :: [String] -> IO ()
suggestions:
  set :: [String] -> IO ()
  error :: String -> IO ()
quit:
  on-click :: IO () -> IO ()
new-game:
  on-click :: (Int {- difficulty -} -> IO ()) -> IO ()
winlose:
  win :: Stats -> IO ()
  lose :: String {- solution -} -> IO ()
*/
module.exports = {
  initialize: initialize,
  initializeKoan: initializeKoan,
  setRule: function(rule){
    game = new zendo.Game(rule);
  }
};
