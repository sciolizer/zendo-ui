// Generated by LiveScript 1.3.1
var assert, ev;
assert = require('assert');
ev = require('../src/evaluate');
var types = require('../src/rule');
describe('all-red', function(){
  var x$, rule;
  x$ = it;
  rule = types.Rule.All(types.Property.Color(types.Color.red));
  x$('should recognize the empty koan as all red', function(){
    var result;
    result = ev.evaluateTop(rule, []);
    return assert.equal(result, true);
  });
  x$('should recognize a 2 of hearts as red', function(){
    var result;
    result = ev.evaluateTop(rule, ["2H"]);
    return assert.equal(result, true);
  });
  x$('should recognize a heart and diamond as red', function(){
    var result;
    result = ev.evaluateTop(rule, ["2H", "AD"]);
    return assert.equal(result, true);
  });
  x$('should reject a single black card', function(){
    var result;
    result = ev.evaluateTop(rule, ["KC"]);
    return assert.equal(result, false);
  });
  x$('should reject if the first is black', function(){
    var result;
    result = ev.evaluateTop(rule, ["KS", "AH"]);
    return assert.equal(result, false);
  });
  x$('should reject if the second is black', function(){
    var result;
    result = ev.evaluateTop(rule, ["AH", "KS"]);
    return assert.equal(result, false);
  });
  return x$;
});
describe('all clubs', function() {
  var rule = types.Rule.All(types.Property.Suit(types.Suit.club));
  it('should recognize a 2 of clubs as clubs', function() {
    assert.equal(ev.evaluateTop(rule, ["2C"]), true);
  })
});
