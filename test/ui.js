// Generated by LiveScript 1.3.1
var assert, ui, nop;
assert = require('assert');
ui = require('../src/ui');
var types = require('../src/rule');
nop = function(){
  return {
    koan: {
      clear: function(){},
      onKeydown: function(){},
      onEnter: function(){},
      showHelp: function(){}
    },
    koans: {
      add: function(){},
      clear: function(){}
    },
    rule: {
      clear: function(){},
      onKeydown: function(){},
      onEnter: function(){}
    },
    paraphrases: {
      set: function(){}
    },
    suggestions: {
      set: function(){},
      error: function(){}
    },
    quit: {
      onClick: function(){}
    },
    newGame: {
      onClick: function(){}
    },
    winlose: {
      win: function(){},
      lose: function(){}
    }
  };
};
var createBrowserAndComponents = function() {
  var browser = {
    koans: []
  };
  var components = nop();
  components.koan.onKeydown = function(func){
    return browser.onKoanKeydown = func;
  };
  components.koan.showHelp = function(help){
    browser.help = help;
  };
  components.koan.onEnter = function(func){
    return browser.onKoanEnter = func;
  };
  components.koans.add = function(koan, buddha){
    return browser.koans.push({
      koan: koan,
      buddha: buddha
    });
  };
  components.koan.clear = function(){
    return browser.cleared = true;
  };
  components.suggestions.set = function(suggestions) {
    browser.suggestions = suggestions;
  };
  components.suggestions.error = function(err) {
    browser.suggestionError = err;
  };
  components.paraphrases.set = function(paraphrases) {
    browser.paraphrases = paraphrases;
  };
  components.rule.onKeydown = function(f) {
    browser.onRuleKeydown = f;
  };
  components.rule.onEnter = function(f) {
    browser.onRuleEnter = f;
  };
  components.suggestions.error = function(err) {
    browser.suggestionError = err;
  };
  components.winlose.win = function() {
    browser.won = true;
  };
  components.winlose.lose = function() {
    browser.lost = true;
  };
  components.quit.onClick = function(f) {
    browser.onQuitClick = f;
  };
  components.newGame.onClick = function(f) {
    browser.onNewGameClick = f;
  };
  return { browser: browser, components: components };
};
var initBrowser = function() {
  ui.setRule(oneBlackCard);
  var bc = createBrowserAndComponents();
  var components = bc.components;
  var browser = bc.browser;
  ui.initialize(components);
  return browser;
};
describe('koan-keydown', function(){
  var browser = initBrowser();
  validate = function(input, expected){
    browser.onKoanKeydown(input);
    return assert.equal(browser.help, expected);
  };
  x$ = it;
  x$('should display no message for the empty koan', function(){
    return validate("", "");
  });
  x$('should display no message for one valid character', function(){
    return validate("A", "");
  });
  x$('should display no message for a valid non-empty koan', function(){
    validate("QS JD", "");
  });
  x$('should suggest T instead of 10', function(){
    return validate("AC 10C", "Try 'TC' instead of '10C'");
  });
  x$('should suggest T instead of 10 at the beginning', function(){
    return validate("10C AS", "Try 'TC' instead of '10C'");
  });
  x$('should suggest J instead of 11', function(){
    return validate("2D 11H", "Try 'JH' instead of '11H'");
  });
  x$('should suggest Q instead of 12', function(){
    return validate("3H 12S", "Try 'QS' instead of '12S'");
  });
  x$('should suggest K instead of 13', function(){
    return validate("4S 13C", "Try 'KC' instead of '13C'");
  });
  x$('should suggest A instead of 1', function(){
    return validate("1C 13D", "Try 'AC' instead of '1C'");
  });
  x$('should display error for card with too many suits', function(){
    return validate("TD ACC", "I don't understand the card 'ACC'. Each card must be two characters long.");
  });
  x$('should display error for card with too many ranks', function(){
    return validate("23D", "I don't understand the card '23D'. Each card must be two characters long.");
  });
  x$('should display error for card beginning with illegal character', function(){
    return validate("AC 0D TS", "I don't understand the card '0D'. Each card must begin with one of these characters: A23456789TJQK.");
  });
  x$('should display error for card ending with illegal character', function(){
    return validate("8R", "I don't understand the card '8R'. Each card must end with one of these characters: CDHS.");
  });
  it('should display error for single character that is neither 1 nor a valid starting character', function() {
    validate("y", "I don't understand the card 'y'. Each card must begin with one of these characters: A23456789TJQK.");
  });
  it('should display no error for single character 1 at end', function() {
    validate("1", "");
  });
  it('should display error for single character 1 occuring before the end', function() {
    validate("1 ", "fdjakl");
  });
  return x$;
});

var oneBlackCard = types.Rule.AtLeastOne(types.Property.Color(types.Color.black));

describe('koan-on-enter', function(){
  var browser = initBrowser();
  x$('should show error for incomplete koan', function(){
    browser.onKoanEnter("A");
    return assert.equal(browser.help, "I don't understand the card 'A'. Each card must be two characters long.");
  });
  x$('should clear help, mark koan, and clear for next koan', function(){
    browser.onKoanEnter("AC 2D");
    assert.equal(browser.help, "");
    assert.deepEqual(browser.koans, [ { koan: 'AC 2D', buddha: true } ]);
    return assert(browser.cleared, "cleared");
  });
  return x$;
});
describe('rule-on-keydown', function() {
  var browser = initBrowser();
  it('should suggest "card" for "car" and provide no paraphrases', function() {
    browser.onRuleKeydown("a car");
    assert.deepEqual(browser.suggestions, ["card"]);
    assert.deepEqual(browser.paraphrases, []);
    assert.equal(browser.suggestionError, "");
  });
  it('should say when it only understands the first word', function() {
    browser.onRuleKeydown("a quaint");
    assert.equal(browser.suggestionError, "I only understand the first word of that.");
    assert.deepEqual(browser.suggestions, []);
    assert.deepEqual(browser.paraphrases, []);
  });
  it('should say when it only understands the first two words', function() {
    browser.onRuleKeydown("a card again");
    assert.equal(browser.suggestionError, "I only understand the first 2 words of that.");
    assert.deepEqual(browser.suggestions, []);
    assert.deepEqual(browser.paraphrases, []);
  });
  it('should provide paraphrases of "a card is black"', function() {
    browser.onRuleKeydown("a card is black");
    assert.equal(browser.suggestionError, "");
    assert.deepEqual(browser.suggestions, ['<enter>', '<space>']);
    var foundParaphrase = false;
    for (var i = 0; i < browser.paraphrases.length; i++) {
      var paraphrase = browser.paraphrases[i];
      if ('at least one card is black' == paraphrase) {
        foundParaphrase = true;
        break;
      }
    }
    assert.equal(foundParaphrase, true);
  })
});
describe('rule-on-enter', function() {
  var browser = initBrowser();
  it('should do nothing if the rule is invalid', function() {
    browser.onRuleEnter('once in a blue moon');
  });
  it('should produce a counter example if the rule is incorrect', function() {
    browser.onRuleEnter('a card is red');
    assert.equal(browser.koans.length, 1);
  });
  it('should declare you the winner if the rule is correct', function() {
    browser.onRuleEnter('a card is black');
    assert.equal(browser.won, true);
  });
});
describe('quit-on-click', function() {
  var browser = initBrowser();
  it('should popup the losing dialog', function() {
    browser.onQuitClick();
    assert.equal(browser.lost, true);
  })
});
describe('new-game-on-click', function() {
  ui.setRule(oneBlackCard);
  var bc = createBrowserAndComponents();
  var components = bc.components;
  var browser = bc.browser;
  ui.initialize(components);
  it('should replace the rule, create a game with that rule, and create a true and false koan', function() {
    //browser.koans = [];
    browser.onNewGameClick();
    if (ui.rule == oneBlackCard) {
      assert.fail("Rule was not changed when new game was clicked");
    }
    assert.equal(browser.koans.length, 2);
    assert.equal(browser.koans[0].buddha, true);
    assert.equal(browser.koans[1].buddha, false);
  });
});
